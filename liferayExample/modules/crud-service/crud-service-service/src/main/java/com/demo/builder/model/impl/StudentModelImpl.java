/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.demo.builder.model.impl;

import com.demo.builder.model.Student;
import com.demo.builder.model.StudentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;BUILD_Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @generated
 */
@JSON(strict = true)
public class StudentModelImpl
	extends BaseModelImpl<Student> implements StudentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the <code>Student</code> interface instead.
	 */
	public static final String TABLE_NAME = "BUILD_Student";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"stuId", Types.BIGINT},
		{"stuName", Types.VARCHAR}, {"stuAddress", Types.VARCHAR},
		{"stuAge", Types.INTEGER}, {"stuJoinDate", Types.TIMESTAMP},
		{"stuPhoneNo", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stuId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stuName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stuAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stuAge", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("stuJoinDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stuPhoneNo", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BUILD_Student (uuid_ VARCHAR(75) null,stuId LONG not null primary key,stuName VARCHAR(75) null,stuAddress VARCHAR(75) null,stuAge INTEGER,stuJoinDate DATE null,stuPhoneNo LONG)";

	public static final String TABLE_SQL_DROP = "drop table BUILD_Student";

	public static final String ORDER_BY_JPQL = " ORDER BY student.stuId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BUILD_Student.stuId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stuId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStuId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stuId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Student)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Student, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Student, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Student)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Student, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Student, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Student, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Student, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Student, Object>>();

			attributeGetterFunctions.put("uuid", Student::getUuid);
			attributeGetterFunctions.put("stuId", Student::getStuId);
			attributeGetterFunctions.put("stuName", Student::getStuName);
			attributeGetterFunctions.put("stuAddress", Student::getStuAddress);
			attributeGetterFunctions.put("stuAge", Student::getStuAge);
			attributeGetterFunctions.put(
				"stuJoinDate", Student::getStuJoinDate);
			attributeGetterFunctions.put("stuPhoneNo", Student::getStuPhoneNo);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Student, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Student, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Student, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Student, String>)Student::setUuid);
			attributeSetterBiConsumers.put(
				"stuId", (BiConsumer<Student, Long>)Student::setStuId);
			attributeSetterBiConsumers.put(
				"stuName", (BiConsumer<Student, String>)Student::setStuName);
			attributeSetterBiConsumers.put(
				"stuAddress",
				(BiConsumer<Student, String>)Student::setStuAddress);
			attributeSetterBiConsumers.put(
				"stuAge", (BiConsumer<Student, Integer>)Student::setStuAge);
			attributeSetterBiConsumers.put(
				"stuJoinDate",
				(BiConsumer<Student, Date>)Student::setStuJoinDate);
			attributeSetterBiConsumers.put(
				"stuPhoneNo",
				(BiConsumer<Student, Long>)Student::setStuPhoneNo);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getStuId() {
		return _stuId;
	}

	@Override
	public void setStuId(long stuId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stuId = stuId;
	}

	@JSON
	@Override
	public String getStuName() {
		if (_stuName == null) {
			return "";
		}
		else {
			return _stuName;
		}
	}

	@Override
	public void setStuName(String stuName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stuName = stuName;
	}

	@JSON
	@Override
	public String getStuAddress() {
		if (_stuAddress == null) {
			return "";
		}
		else {
			return _stuAddress;
		}
	}

	@Override
	public void setStuAddress(String stuAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stuAddress = stuAddress;
	}

	@JSON
	@Override
	public int getStuAge() {
		return _stuAge;
	}

	@Override
	public void setStuAge(int stuAge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stuAge = stuAge;
	}

	@JSON
	@Override
	public Date getStuJoinDate() {
		return _stuJoinDate;
	}

	@Override
	public void setStuJoinDate(Date stuJoinDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stuJoinDate = stuJoinDate;
	}

	@JSON
	@Override
	public long getStuPhoneNo() {
		return _stuPhoneNo;
	}

	@Override
	public void setStuPhoneNo(long stuPhoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stuPhoneNo = stuPhoneNo;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Student>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setUuid(getUuid());
		studentImpl.setStuId(getStuId());
		studentImpl.setStuName(getStuName());
		studentImpl.setStuAddress(getStuAddress());
		studentImpl.setStuAge(getStuAge());
		studentImpl.setStuJoinDate(getStuJoinDate());
		studentImpl.setStuPhoneNo(getStuPhoneNo());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public Student cloneWithOriginalValues() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		studentImpl.setStuId(this.<Long>getColumnOriginalValue("stuId"));
		studentImpl.setStuName(this.<String>getColumnOriginalValue("stuName"));
		studentImpl.setStuAddress(
			this.<String>getColumnOriginalValue("stuAddress"));
		studentImpl.setStuAge(this.<Integer>getColumnOriginalValue("stuAge"));
		studentImpl.setStuJoinDate(
			this.<Date>getColumnOriginalValue("stuJoinDate"));
		studentImpl.setStuPhoneNo(
			this.<Long>getColumnOriginalValue("stuPhoneNo"));

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Student)) {
			return false;
		}

		Student student = (Student)object;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.uuid = getUuid();

		String uuid = studentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			studentCacheModel.uuid = null;
		}

		studentCacheModel.stuId = getStuId();

		studentCacheModel.stuName = getStuName();

		String stuName = studentCacheModel.stuName;

		if ((stuName != null) && (stuName.length() == 0)) {
			studentCacheModel.stuName = null;
		}

		studentCacheModel.stuAddress = getStuAddress();

		String stuAddress = studentCacheModel.stuAddress;

		if ((stuAddress != null) && (stuAddress.length() == 0)) {
			studentCacheModel.stuAddress = null;
		}

		studentCacheModel.stuAge = getStuAge();

		Date stuJoinDate = getStuJoinDate();

		if (stuJoinDate != null) {
			studentCacheModel.stuJoinDate = stuJoinDate.getTime();
		}
		else {
			studentCacheModel.stuJoinDate = Long.MIN_VALUE;
		}

		studentCacheModel.stuPhoneNo = getStuPhoneNo();

		return studentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Student)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Student>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Student.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _stuId;
	private String _stuName;
	private String _stuAddress;
	private int _stuAge;
	private Date _stuJoinDate;
	private long _stuPhoneNo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Student, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Student)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("stuId", _stuId);
		_columnOriginalValues.put("stuName", _stuName);
		_columnOriginalValues.put("stuAddress", _stuAddress);
		_columnOriginalValues.put("stuAge", _stuAge);
		_columnOriginalValues.put("stuJoinDate", _stuJoinDate);
		_columnOriginalValues.put("stuPhoneNo", _stuPhoneNo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("stuId", 2L);

		columnBitmasks.put("stuName", 4L);

		columnBitmasks.put("stuAddress", 8L);

		columnBitmasks.put("stuAge", 16L);

		columnBitmasks.put("stuJoinDate", 32L);

		columnBitmasks.put("stuPhoneNo", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Student _escapedModel;

}